name: Update Version

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  update-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get current version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "Current version: $VERSION"
          echo "::set-output name=CURRENT_VERSION::$VERSION"

      - name: Get change type
        id: get_change_type
        run: |
          CHANGE_TYPE=$(head -n 1 changes.md)
          echo "Change type: $CHANGE_TYPE"
          echo "change-type=$CHANGE_TYPE" >> $GITHUB_ENV
      - name: Update package.json version
        run: |
          CHANGE_TYPE=${{ env.change-type }}
          echo "Change type: $CHANGE_TYPE"
          
          # Check Git status for debugging
          git status
          
          # Ensure Git configuration is set
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Attempt to update the version with verbose output
          case $CHANGE_TYPE in
            "patch")
              NEW_VERSION=$(npm version patch --silent --no-git-tag-version)
              ;;
            "minor")
              NEW_VERSION=$(npm version minor --silent --no-git-tag-version)
              ;;
            "major")
              NEW_VERSION=$(npm version major --silent --no-git-tag-version)
              ;;
            *)
              echo "Invalid change type in changes.md"
              exit 1
              ;;
          esac
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update package.json file
        run: |
          jq --arg VERSION "$NEW_VERSION" '.version = $VERSION' package.json > package.json.tmp
          mv package.json.tmp package.json

      - name: Update CHANGELOG.md
        run: |
          DATE=$(date +%d/%m/%Y)
          echo "# $NEW_VERSION ($DATE)" >> CHANGELOG.md
          cat changes.md >> CHANGELOG.md

      - name: Delete changes.md
        run: rm changes.md

      - name: Commit changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json CHANGELOG.md
          git commit -m "Update version to $NEW_VERSION"

      - name: Push changes
        run: git push origin main


#name: Bump Version Manually
#
#on: workflow_dispatch
#
#jobs:
#  bump-version:
#    runs-on: ubuntu-latest
#    steps:
#      # Checkout the repository
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      # Extract the latest version
#      - name: Get latest version from CHANGELOG.md
#        id: get_version
#        run: |
#          VERSION=$(grep '^# [0-9]' CHANGELOG.md | head -n 1 | awk '{print $2}')
#          echo "Latest version is $VERSION"
#          echo "::set-output name=version::$VERSION"
#      # Get the last commit message
#      - name: Get last commit message
#        id: get_commit_message
#        run: |
#          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
#          echo "Last commit message is '$COMMIT_MESSAGE'"
#          echo "::set-output name=message::$COMMIT_MESSAGE"
#      # Determine the new version number
#      - name: Bump version based on commit message
#        id: bump_version
#        run: |
#          VERSION="${{ steps.get_version.outputs.version }}"
#          COMMIT_MESSAGE="${{ steps.get_commit_message.outputs.message }}"
#          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
#          MAJOR=${VERSION_PARTS[0]}
#          MINOR=${VERSION_PARTS[1]}
#          PATCH=${VERSION_PARTS[2]}
#
#          if [[ "$COMMIT_MESSAGE" == *"major"* ]]; then
#            MAJOR=$((MAJOR+1))
#            MINOR=0
#            PATCH=0
#          elif [[ "$COMMIT_MESSAGE" == *"minor"* ]]; then
#            MINOR=$((MINOR+1))
#            PATCH=0
#          elif [[ "$COMMIT_MESSAGE" == *"patch"* ]]; then
#            PATCH=$((PATCH+1))
#          fi
#
#          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
#          echo "New version is $NEW_VERSION"
#          echo "::set-output name=new_version::$NEW_VERSION"
#      # Use the new version in later steps as needed
#      - name: Use the new version
#        run: |
#          echo "The new version is ${{ steps.bump_version.outputs.new_version }}"
